[{"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/index.js":"1","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/App.js":"2","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/pages/Register.jsx":"3","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/pages/Chat.jsx":"4","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/pages/Login.jsx":"5","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/utils/ApiRoutes.js":"6","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/pages/SetAvatar.jsx":"7","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/components/Contacts.jsx":"8","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/components/Welcome.jsx":"9","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/components/ChatHere.jsx":"10"},{"size":255,"mtime":1651955405595,"results":"11","hashOfConfig":"12"},{"size":588,"mtime":1652109189519,"results":"13","hashOfConfig":"12"},{"size":4535,"mtime":1652051544826,"results":"14","hashOfConfig":"12"},{"size":2275,"mtime":1652110695846,"results":"15","hashOfConfig":"12"},{"size":3965,"mtime":1652047524758,"results":"16","hashOfConfig":"12"},{"size":255,"mtime":1652046925153,"results":"17","hashOfConfig":"12"},{"size":3503,"mtime":1652106864454,"results":"18","hashOfConfig":"12"},{"size":5376,"mtime":1652103196005,"results":"19","hashOfConfig":"12"},{"size":705,"mtime":1652108666192,"results":"20","hashOfConfig":"12"},{"size":1273,"mtime":1652111211502,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"17200tk",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"25"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/index.js",[],[],[],"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/App.js",[],[],"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/pages/Register.jsx",["55","56"],[],"import React ,{useState,useEffect}from 'react'\nimport { Link, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components'\nimport Logo from '../assets/logo.svg'\nimport {ToastContainer,toast} from \"react-toastify\"\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from \"axios\"\nimport { registerRoute } from '../utils/ApiRoutes';\nfunction Register() {\n    const navigate= useNavigate()\n    const [values,setValues]=useState({\n        username:'',\n        email:'',\n        password:'',\n        confirmPassword:'',\n    });\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \n      };\n    const toastOption={\n        position:\"top-right\",\n        autoClose:8000,\n        pauseOnHover:true,\n        draggable:true,\n        theme:\"dark\"\n     }\n //to save the login state of the user\n useEffect(()=>{\n    if(localStorage.getItem(\"chat-app-user\")){\n        navigate(\"/\")\n    }\n},[])\n    const handleSubmit=async (event)=>{\n        event.preventDefault();\n       if(handleValidation()){\n        \n\n        const {password,username,email}=values;\n        const {data}=await axios.post(registerRoute,{\n            username,email,password\n        })\n       if(data.status===false){\n           toast.error(data.msg,toastOption)\n       }\n       if(data.status===true){\n           localStorage.setItem(\"chat-app-user\",JSON.stringify(data.user))\n           navigate(\"/\")\n       }\n       \n       } ;\n    }\n\n    const handleChange=(event)=>{\n        setValues({...values,[event.target.name]:event.target.value})\n    }\n\n    const handleValidation = ()=>{\n        const {password,confirmPassword,username,email}=values;\n        if(password!==confirmPassword){\n          \n         toast.error(' passowrd and confirm password should be same.',toastOption);\n         return false;\n        }else if (username.length<3){\n            toast.error(' username must be greater than 3',toastOption);\n            return false;\n\n        }else if (password.length<8){\n            toast.error(' password must at least than 8',toastOption);\n            return false;\n\n        }else if (email===\"\"){\n            toast.error(' email is required',toastOption);\n            return false;\n\n        }\n        return true\n        ;\n    }\n\n  return (\n   <>\n\n    <FormContainer>\n        <form onSubmit={(event)=>handleSubmit(event)}>\n        <div className='brand'>\n    <img src={Logo} alt='logo'/>\n    <h1>snappy</h1>\n        </div>\n        <input type=\"text\" placeholder=\"Username\" name=\"username\"  onChange={(event)=> handleChange(event)}  />\n        <input type=\"email\" placeholder=\"email\" name=\"email\"  onChange={(event)=> handleChange(event)}  />\n        <input type=\"password\" placeholder=\"password\" name=\"password\"  onChange={(event)=> handleChange(event)}  />\n        <input type=\"password\" placeholder=\"confirmpassword\" name=\"confirmPassword\"  onChange={(event)=> handleChange(event)}  />\n        <button type='submit' >Create user</button>\n        <span> Already have account? \n        <Link to='/login'>   Login</Link>\n        </span>\n        </form>\n    </FormContainer>\n    <ToastContainer>\n\n    </ToastContainer>\n\n   </>\n  )\n}\nconst FormContainer = styled.div`\n\nheight:100vh;\nwidth:100vw;\ndisplay:flex;\nflex-direction:column;\njustify-content:center;\ngap:1rem;\nalign-items:center;\nbackground-color:#131324;\n.brand{\n    display:flex;\n    align-items:center;\n    gap:1rem;\n    justify-content:center;\nimg{\n    height:5rem;\n}\n\nh1{\n    color:white;\n    text-transform:upppercase;\n\n}\n}\nform{\n    display:flex;\n    flex-direction:column;\n    gap:2rem;\n    background-color:#00000076;\n    padding:3rem 5rem;\n    border-radius:2rem;\n    input{\n        border-radius:0.4rem;\n        background-color: transparent;\n        padding:1rem;\n        color:white;\n        width:100%;\n        font-size:1rem;\n        border:0.1rem solid #4e0eff;\n        &:focus{\n            border:0.1rem solid green;\n            outline:none;\n\n        }\n    }\n    button{\n        background-color: #997af0;\n        color:white;\n        padding: 1rem 2rem;\n        border:none;\n        font-weight:bold;\n        cursor:pointer;\n        border-radius:0.4rem;\n        font-size:1rem;\n        text-transform:uppercase;\n        transition:0.5s ease-in-out;\n        &:hover{\n        background-color: #4e0eff;\n            \n        }\n\n    }\n    span{\n        color:white;\n        text-transform:uppercase;\n        a{\n            color:#4e0eff;\n        text-decoration:none;\n        font-weight:bold;\n\n        \n        }\n    }\n}\n\n`;\nexport default Register","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/pages/Chat.jsx",["57","58"],[],"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/pages/Login.jsx",["59","60"],[],"import React ,{useState,useEffect}from 'react'\nimport { Link, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components'\nimport Logo from '../assets/logo.svg'\nimport {ToastContainer,toast} from \"react-toastify\"\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from \"axios\"\nimport { loginRoute } from '../utils/ApiRoutes';\nfunction Login() {\n    const navigate= useNavigate()\n    const [values,setValues]=useState({\n        username:'',\n    \n        password:'',\n        \n    });\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \n      };\n    const toastOption={\n        position:\"top-right\",\n        autoClose:8000,\n        pauseOnHover:true,\n        draggable:true,\n        theme:\"dark\"\n     }\n\n     //to save the login state of the user\n     useEffect(()=>{\n         if(localStorage.getItem(\"chat-app-user\")){\n             navigate(\"/\")\n         }\n     },[])\n\n\n    const handleSubmit=async (event)=>{\n        event.preventDefault();\n       if(handleValidation()){\n        \n\n        const {password,username}=values;\n        const {data}=await axios.post(loginRoute,{\n            username,password\n        })\n       if(data.status===false){\n           toast.error(data.msg,toastOption)\n       }\n       if(data.status===true){\n           localStorage.setItem(\"chat-app-user\",JSON.stringify(data.user))\n           navigate(\"/\")\n       }\n       } ;\n    }\n\n    const handleChange=(event)=>{\n        setValues({...values,[event.target.name]:event.target.value})\n    }\n\n    const handleValidation = ()=>{\n        const {password,username}=values;\n        if(password===\"\"){\n          \n         toast.error(' username and password are required',toastOption);\n         return false;\n        }else if (username===\"\"){\n            toast.error('username and password are required',toastOption);\n            return false;\n\n        }\n        return true\n        ;\n    }\n\n  return (\n   <>\n\n    <FormContainer>\n        <form onSubmit={(event)=>handleSubmit(event)}>\n        <div className='brand'>\n    <img src={Logo} alt='logo'/>\n    <h1>snappy</h1>\n        </div>\n        <input type=\"text\" placeholder=\"Username\" name=\"username\"  onChange={(event)=> handleChange(event)}  />\n        <input type=\"password\" placeholder=\"password\" name=\"password\"  onChange={(event)=> handleChange(event)}  />\n        <button type='submit' >Login</button>\n        <span> Do not  have account? \n        <Link to='/register'>   Register</Link>\n        </span>\n        </form>\n    </FormContainer>\n    <ToastContainer>\n\n    </ToastContainer>\n\n   </>\n  )\n}\nconst FormContainer = styled.div`\n\nheight:100vh;\nwidth:100vw;\ndisplay:flex;\nflex-direction:column;\njustify-content:center;\ngap:1rem;\nalign-items:center;\nbackground-color:#131324;\n.brand{\n    display:flex;\n    align-items:center;\n    gap:1rem;\n    justify-content:center;\nimg{\n    height:5rem;\n}\n\nh1{\n    color:white;\n    text-transform:upppercase;\n\n}\n}\nform{\n    display:flex;\n    flex-direction:column;\n    gap:2rem;\n    background-color:#00000076;\n    padding:3rem 5rem;\n    border-radius:2rem;\n    input{\n        border-radius:0.4rem;\n        background-color: transparent;\n        padding:1rem;\n        color:white;\n        width:100%;\n        font-size:1rem;\n        border:0.1rem solid #4e0eff;\n        &:focus{\n            border:0.1rem solid green;\n            outline:none;\n\n        }\n    }\n    button{\n        background-color: #997af0;\n        color:white;\n        padding: 1rem 2rem;\n        border:none;\n        font-weight:bold;\n        cursor:pointer;\n        border-radius:0.4rem;\n        font-size:1rem;\n        text-transform:uppercase;\n        transition:  0.5s ease-in-out;\n        &:hover{\n        background-color: #4e0eff;\n            \n        }\n\n    }\n    span{\n        color:white;\n        text-transform:uppercase;\n        a{\n            color:#4e0eff;\n        text-decoration:none;\n        font-weight:bold;\n\n        \n        }\n    }\n}\n\n`\nexport default Login","/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/utils/ApiRoutes.js",[],[],"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/pages/SetAvatar.jsx",[],[],"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/components/Contacts.jsx",["61"],[],"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/components/Welcome.jsx",[],[],"/media/khalid/New Volume/projects/mearn/superChat/Chat-React-Express-mongodb/client/src/components/ChatHere.jsx",["62"],[],{"ruleId":"63","severity":1,"message":"64","line":17,"column":11,"nodeType":"65","messageId":"66","endLine":17,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":33,"column":3,"nodeType":"69","endLine":33,"endColumn":5,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"68","line":27,"column":6,"nodeType":"69","endLine":27,"endColumn":8,"suggestions":"71"},{"ruleId":"67","severity":1,"message":"68","line":41,"column":6,"nodeType":"69","endLine":41,"endColumn":19,"suggestions":"72"},{"ruleId":"63","severity":1,"message":"64","line":17,"column":11,"nodeType":"65","messageId":"66","endLine":17,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":34,"column":8,"nodeType":"69","endLine":34,"endColumn":10,"suggestions":"73"},{"ruleId":"67","severity":1,"message":"74","line":14,"column":8,"nodeType":"69","endLine":14,"endColumn":21,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":13,"column":13,"nodeType":"78","endLine":13,"endColumn":80},"no-unused-vars","'headers' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["79"],["80"],["81"],["82"],"React Hook useEffect has a missing dependency: 'contacts'. Either include it or remove the dependency array.",["83"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"84","fix":"85"},{"desc":"84","fix":"86"},{"desc":"87","fix":"88"},{"desc":"84","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [navigate]",{"range":"92","text":"93"},{"range":"94","text":"93"},"Update the dependencies array to be: [currentUser, navigate]",{"range":"95","text":"96"},{"range":"97","text":"93"},"Update the dependencies array to be: [contacts, currentUser]",{"range":"98","text":"99"},[922,924],"[navigate]",[917,919],[1272,1285],"[currentUser, navigate]",[913,915],[613,626],"[contacts, currentUser]"]